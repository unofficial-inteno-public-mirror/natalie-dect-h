/****************************************************************************
* Program/file: ApiFpUle.h
*
* Copyright (C) by RTX A/S, Denmark.
* These computer program listings and specifications, are the property of
* RTX A/S, Denmark and shall not be reproduced or copied or used in
* whole or in part without written permission from RTX A/S, Denmark.
*
* Programmer: Michael S Jensen
*
* MODULE: ApiFpUle
* CONTROLLING DOCUMENT: Phoenix_API_FP_ULE.docm   Revision: 123
* DESCRIPTION: Definition of the ApiFpUle interface.
* This file is generated by Word from the interface document: Phoenix_API_FP_ULE.docm using InterfaceMacro version 65
*
* DO NOT MAKE CHANGES TO THIS FILE DIRECTLY!
* CHANGES SHOULD ONLY BE MADE TO THE INTERFACE DOCUMENT!
*
****************************************************************************/

/*! \file
* Definition of the ApiFpUle interface.
*/

/****************************************************************************
*                                  PVCS info
*****************************************************************************

$Author:   AH  $
$Date:   15 Apr 2013 13:54:10  $
$Revision:   1.17  $
$Modtime:   15 Apr 2013 13:51:48  $
$Archive:   J:/sw/Include/Phoenix/Api/FpUle/vcs/ApiFpUle.h_v  $
*/

#ifndef APIFPULE_H
#define APIFPULE_H

/****************************************************************************
*                               Include files
****************************************************************************/

#include <Api/ApiCfg.h>

#include <Phoenix/Api/Types/ApiTypes.h>

/****************************************************************************
*                               Macros/Defines
****************************************************************************/

/****************************************************************************
*                     Enumerations/Type definitions/Structs
****************************************************************************/

#if (RTX_CORE_VERSION >= 0x0224)
  #include <Standard/Common/RsPushPack1.h>
#else
  #pragma pack(push,1)
#endif

/* Mail primitives:
  API_FP_ULE_INIT_REQ = 0x4188,
  API_FP_ULE_INIT_CFM = 0x4189,
  API_FP_ULE_GET_REGISTRATION_COUNT_REQ = 0x418C,
  API_FP_ULE_GET_REGISTRATION_COUNT_CFM = 0x418D,
  API_FP_ULE_DELETE_REGISTRATION_REQ = 0x4192,
  API_FP_ULE_DELETE_REGISTRATION_CFM = 0x4193,
  API_FP_ULE_GET_DEVICE_IPUI_REQ = 0x418E,
  API_FP_ULE_GET_DEVICE_IPUI_CFM = 0x418F,
  API_FP_ULE_TESTCMD_REQ = 0x418A,
  API_FP_ULE_DATA_IND = 0x4185,
  API_FP_ULE_DTR_IND = 0x4187,
  API_FP_ULE_DATA_REQ = 0x4186,
  API_FP_ULE_ABORT_DATA_REQ = 0x4190,
  API_FP_ULE_ABORT_DATA_CFM = 0x4191,
  API_FP_ULE_DATA_CFM = 0x418B,
  API_FP_ULE_FEATURES_REQ = 0x41A0,
  API_FP_ULE_FEATURES_CFM = 0x41A1,
End of mail primitives. */



/*! This type is used to exchange features between the host and the DECT
   module. */
typedef enum RSENUMTAG(ApiFpUleFeatureType)
{
  API_FP_ULE_EXTENDED_TERMINAL_ID_SUPPORT = 0x01, /*!<  */
} RSENUM8(ApiFpUleFeatureType);


/*! Mail without parameters. */
typedef struct ApifpuleEmptySignalType
{
  RosPrimitiveType Primitive; /*!< Mail primitive. */
} ApifpuleEmptySignalType;

/*! Initialize ULE operation of the FP. Until this mail is sent, the FP
   will not set the ULE capabilities bits, and already enrolled ULE devices
   will not function properly. The possible configurations will depend on the
   memory available for ULE operation in the target. See also
   API_FP_ULE_INIT_CFM. If ULE support is not required simply do not send this
   mail. This mail should only be sent once. */
typedef struct ApiFpUleInitReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_INIT_REQ = 0x4188 */
  rsuint16 MaxUlpDevices;               /*!< Maximum ULE devices allowed enrolling. If
                                           this is larger than number of subscriptions, the
                                           value is truncated.  If more than MaxUlpDevices
                                           are already registered, they will all be allowed
                                           to work. Range 1-0xFF. */
} ApiFpUleInitReqType;

/*! ULE initialization confirmation */
typedef struct ApiFpUleInitCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_INIT_CFM = 0x4189 */
  RsStatusType Status;                  /*!< Indicates whether the command succeeded or
                                           not. */
  rsuint16 MaxUlpDevices;               /*!< Maximum ULE devices supported by the FP.
                                            0 if not known. */
  rsuint16 UpLinkBuffers;               /*!< Number of ULE uplink buffers allocated.
                                            0 if not known */
} ApiFpUleInitCfmType;

/*! This command is used by the MMI to request the maximum number of ULE 
   devices that can be registered to the FP, the number of devices currently
   registered and a bitmask giving the device ID?s, by which the matching
   IPUI?s can be retrieved. */
typedef ApifpuleEmptySignalType ApiFpUleGetRegistrationCountReqType;

/*! This mail is used by the API to confirm the
   API_FP_ULE_GET_REGISTRATION_COUNT_REQ command. */
typedef struct ApiFpUleGetRegistrationCountCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_GET_REGISTRATION_COUNT_CFM = 0x418D */
  RsStatusType Status;                  /*!< Indicates whether the command succeeded or
                                           not. */
  rsuint8 MaxNoHs;                      /*!< Max numbers of handsets bit used, always
                                           placed in start of bitmask and always zero, may
                                           be used as offset into DeviceIdBitArr */
  rsuint8 MaxNoDevices;                 /*!< The maximum number of ULE devices that can
                                           be registered. */
  rsuint8 NoDevices;                    /*!< The number of ULE devices registered
                                           currently. */
  rsuint8 Length;                       /*!< Byte length of DeviceIdBitArr */
  rsuint8 DeviceIdBitArr[1];            /*!< Bit array of registered ULE device Id?s. */
} ApiFpUleGetRegistrationCountCfmType;

/*! This mail is used by the API to locally delete the devices registration
   data. No attempt to delete data in the actual device is done, if this is
   needed use the MM function instead. */
typedef struct ApiFpUleDeleteRegistrationReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DELETE_REGISTRATION_REQ = 0x4192 */
  ApiTerminalIdType TerminalId;         /*!< The Id of the device that should be
                                           deleted. */
} ApiFpUleDeleteRegistrationReqType;

/*! This mail is used to inform the API of the result of deleting the
   registration data. */
typedef struct ApiFpUleDeleteRegistrationCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DELETE_REGISTRATION_CFM = 0x4193 */
  RsStatusType Status;                  /*!< Indicates whether the command succeeded or
                                           not. */
  ApiTerminalIdType TerminalId;         /*!< The Id of the deleted device. */
} ApiFpUleDeleteRegistrationCfmType;

/*! This command is used by the MMI to request the IPUI of one of the ULE
   devices registered. */
typedef struct ApiFpUleGetDeviceIpuiReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_GET_DEVICE_IPUI_REQ = 0x418E */
  ApiTerminalIdType TerminalId;         /*!< The Id of the Device that the MCU wants the
                                           IPUI for. */
} ApiFpUleGetDeviceIpuiReqType;

/*! This mail is used by the API to confirm the
   API_FP_ULE_GET_DEVICE_IPUI_REQ command. */
typedef struct ApiFpUleGetDeviceIpuiCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_GET_DEVICE_IPUI_CFM = 0x418F */
  RsStatusType Status;                  /*!< Indicates whether the command succeeded or
                                           not. */
  ApiTerminalIdType TerminalId;         /*!< The Id for which the IPUI is read. */
  rsuint8 IPUI[5];                      /*!< The IPUI. */
} ApiFpUleGetDeviceIpuiCfmType;

/*! Undocumented  - development/test purpose only */
typedef struct ApiFpUleTestcmdReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_TESTCMD_REQ = 0x418A */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  rsuint8 Cmd;                          /*!< Test command */
  rsuint8 Length;                       /*!< Test command data length */
  rsuint8 Data[1];                      /*!< Test command  data */
} ApiFpUleTestcmdReqType;

/*! This mail indicates that data has been received from the PP. */
typedef struct ApiFpUleDataIndType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DATA_IND = 0x4185 */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  rsuint16 Length;                      /*!< Length of data */
  rsuint8 Data[1];                      /*!< Data. */
} ApiFpUleDataIndType;

/*! ?Data transmit ready?  indication. Means that any previous packet has
   been transmitted and the ULE-API is ready for a new data transmit via
   API_FP_ULE_DATA_REQ. */
typedef struct ApiFpUleDtrIndType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DTR_IND = 0x4187 */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  RsStatusType Status;                  /*!< Status of last data transmission, 
                                           RSS_SUCCESS if data has been transmitted and
                                           acknowledge  otherwise  RSS_FAILED. */
} ApiFpUleDtrIndType;

/*! This mail is used by the API for sending data to the PP. */
typedef struct ApiFpUleDataReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DATA_REQ = 0x4186 */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  rsuint8 DlcCtrl;                      /*!< DLC control data
                                             Bit7 =  0/1   1= Use dummy bearer  paging.
                                            */
  rsuint16 Length;                      /*!< Length */
  rsuint8 Data[1];                      /*!< Data. */
} ApiFpUleDataReqType;

/*! This mail is used by the API for aborting an already scheduled data
   transmission to the PP.
     Only aborted if PP not has started transmitting. */
typedef struct ApiFpUleAbortDataReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_ABORT_DATA_REQ = 0x4190 */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
} ApiFpUleAbortDataReqType;

/*! This mail is used by the API for informing PP about status of the
   aborted. data transmission. */
typedef struct ApiFpUleAbortDataCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_ABORT_DATA_CFM = 0x4191 */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  RsStatusType Status;                  /*!< RSS_BAD_ADDRESS  
                                             TPUI not avaible
                                           RSS_UNAVAILABLE 
                                             Not setup to transmit data
                                           RSS_BUSY  
                                             Transmitting data is started
                                           RSS_NO_DATA
                                             Zero data length 
                                           RSS_SUCCESS */
  rsuint8 DlcCtrl;                      /*!< DLC control data */
  rsuint16 Length;                      /*!< Length */
  rsuint8 Data[1];                      /*!< Data. */
} ApiFpUleAbortDataCfmType;

/*! Confirmation that API_FP_ULE_DATA_REQ has been handled. */
typedef struct ApiFpUleDataCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_DATA_CFM = 0x418B */
  ApiTerminalIdType TerminalId;         /*!< Portable part number */
  RsStatusType Status;                  /*!< Status for the data request */
} ApiFpUleDataCfmType;

/*! This command is used to enable/disable features in the FpUle API.
    Enabling/disabling of extended terminal id will also affect all other APIs
   using TerminalId. */
typedef struct ApiFpUleFeaturesReqType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_FEATURES_REQ = 0x41A0 */
  ApiFpUleFeatureType ApiFpUleFeature;  /*!< Requested features */
} ApiFpUleFeaturesReqType;

/*! This command confirms the new feature settings. */
typedef struct ApiFpUleFeaturesCfmType
{
  RosPrimitiveType Primitive;            /*!< API_FP_ULE_FEATURES_CFM = 0x41A1 */
  RsStatusType Status;
  ApiFpUleFeatureType ApiFpUleFeature;  /*!< Supported features */
} ApiFpUleFeaturesCfmType;

#if (RTX_CORE_VERSION >= 0x0224)
  #include <Standard/Common/RsPopPack.h>
#else
  #pragma pack(pop)
#endif

#ifdef __cplusplus
extern "C"
{
#endif
/** \cond internal */

/****************************************************************************
*     Function prototypes for mail packaging and sending(MPS) functions
****************************************************************************/

/****************************************************************************
* FUNCTION:      SendApiFpUleInitReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_INIT_REQ = 0x4188
****************************************************************************/
void SendApiFpUleInitReq ( RosTaskIdType Src,
                           rsuint16 MaxUlpDevices);          /*!< Maximum ULE devices
                                                                allowed enrolling. If this
                                                                is larger than number of
                                                                subscriptions, the value is
                                                                truncated.  If more than
                                                                MaxUlpDevices are already
                                                                registered, they will all be
                                                                allowed to work. Range
                                                                1-0xFF. */

/****************************************************************************
* FUNCTION:      SendApiFpUleGetRegistrationCountReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_GET_REGISTRATION_COUNT_REQ = 0x418C
****************************************************************************/
void SendApiFpUleGetRegistrationCountReq ( RosTaskIdType Src );


/****************************************************************************
* FUNCTION:      SendApiFpUleDeleteRegistrationReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_DELETE_REGISTRATION_REQ = 0x4192
****************************************************************************/
void SendApiFpUleDeleteRegistrationReq ( RosTaskIdType Src,
                                         ApiTerminalIdType TerminalId);
                                                             /*!< The Id of the device
                                                                that should be deleted. */

/****************************************************************************
* FUNCTION:      SendApiFpUleGetDeviceIpuiReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_GET_DEVICE_IPUI_REQ = 0x418E
****************************************************************************/
void SendApiFpUleGetDeviceIpuiReq ( RosTaskIdType Src,
                                    ApiTerminalIdType TerminalId);
                                                             /*!< The Id of the Device
                                                                that the MCU wants the IPUI
                                                                for. */

/****************************************************************************
* FUNCTION:      SendApiFpUleTestcmdReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_TESTCMD_REQ = 0x418A
****************************************************************************/
void SendApiFpUleTestcmdReq ( RosTaskIdType Src,
                              ApiTerminalIdType TerminalId,  /*!< Portable part number */
                              rsuint8 Cmd,                   /*!< Test command */
                              rsuint8 Length,                /*!< Test command data
                                                                length */
                              rsuint8 Data[1]);              /*!< Test command  data */

/****************************************************************************
* FUNCTION:      SendApiFpUleDataReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_DATA_REQ = 0x4186
****************************************************************************/
void SendApiFpUleDataReq ( RosTaskIdType Src,
                           ApiTerminalIdType TerminalId,     /*!< Portable part number */
                           rsuint8 DlcCtrl,                  /*!< DLC control data
                                                                  Bit7 =  0/1   1= Use
                                                                dummy bearer  paging.
                                                                 */
                           rsuint16 Length,                  /*!< Length */
                           rsuint8 Data[1]);                 /*!< Data. */

/****************************************************************************
* FUNCTION:      SendApiFpUleAbortDataReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_ABORT_DATA_REQ = 0x4190
****************************************************************************/
void SendApiFpUleAbortDataReq ( RosTaskIdType Src,
                                ApiTerminalIdType TerminalId);
                                                             /*!< Portable part number */

/****************************************************************************
* FUNCTION:      SendApiFpUleAbortDataCfm
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_ABORT_DATA_CFM = 0x4191
****************************************************************************/
void SendApiFpUleAbortDataCfm ( RosTaskIdType Src,
                                ApiTerminalIdType TerminalId,
                                                             /*!< Portable part number */
                                RsStatusType Status,         /*!< RSS_BAD_ADDRESS  
                                                                  TPUI not avaible
                                                                RSS_UNAVAILABLE 
                                                                  Not setup to transmit data
                                                                RSS_BUSY  
                                                                  Transmitting data is started
                                                                RSS_NO_DATA
                                                                  Zero data length 
                                                                RSS_SUCCESS */
                                rsuint8 DlcCtrl,             /*!< DLC control data */
                                rsuint16 Length,             /*!< Length */
                                rsuint8 Data[1]);            /*!< Data. */

/****************************************************************************
* FUNCTION:      SendApiFpUleFeaturesReq
* DESCRIPTION:   MPS function for sending mails with primitive:
*                API_FP_ULE_FEATURES_REQ = 0x41A0
****************************************************************************/
void SendApiFpUleFeaturesReq ( RosTaskIdType Src,
                               ApiFpUleFeatureType ApiFpUleFeature);
                                                             /*!< Requested features */

/** \endcond */
#ifdef __cplusplus
}
#endif
#endif /*APIFPULE_H */


